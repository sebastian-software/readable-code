#######################################################################################
# Code Quality
#######################################################################################

rules:
  # Verify calls of super() in constructors
  constructor-super: error

  # Don't let console output slip through were not explicitely stated otherwise
  no-console: error

  # Disallow modifying variables of class declarations
  no-class-assign: error

  # Disallow use of Object.prototypes builtins directly
  no-prototype-builtins: error

  # Disallow Functions in Loops
  no-loop-func: error

  # Disallow modifying variables that are declared using const
  no-const-assign: error

  # Disallow duplicate name in class members
  no-dupe-class-members: error

  # Enforces return statements in callbacks of arrayâ€™s methods like `filter`
  array-callback-return: error

  # Being explicit about the behavior. Prefer 'let' in more narrow local usage.
  block-scoped-var: error

  # Enforce minimal code complexity. The default of 20 is far to high for maintainable code.
  complexity:
    - error
    - 10

  # Require return statements to either always or never specify values
  consistent-return: error

  # Require Default Case in Switch Statements
  default-case:
    - error

  # Require Dot Notation. No need for using array-like accessor in most cases.
  dot-notation:
    - error
    - allowKeywords: true

  # Smart option allows simple equal for null-comparison which is good
  eqeqeq:
    - error
    - smart

  # Was mainly relevant while people extended Object.prototype.xxx
  guard-for-in:
    - off

  # Don't let alerts slip through production systems
  no-alert: error

  # Disallow Use of caller/callee which make several code optimizations impossible
  no-caller: error

  # Hard to read code must be forbidden
  no-div-regex: error

  # Prefer what ever the developer thinks make code more readable/understandable
  no-else-return: off

  # Disallow empty functions
  no-empty-function: error

  # Disallow empty destructuring patterns
  no-empty-pattern: error

  # Disabled: Disallow Null Comparisons. Stupid check. See also rule `eqeqeq`
  no-eq-null: off

  # Disallow eval()
  no-eval: error

  # Disallow Extending of Native Objects
  no-extend-native: error

  # Disallow Case Statement Fallthrough. Disable for rare exceptions.
  no-fallthrough: error

  # Disallow Floating Decimals. These look like errors.
  no-floating-decimal: error

  # Disallow the type conversion with shorter notations.
  no-implicit-coercion:
    - error
    - boolean: true
      string: true
      number: true

  # Disallow variable and function declarations in the global scope
  # Does not make sense with ES6 modules
  no-implicit-globals:
    - off

  # Disallow Implied eval()
  no-implied-eval: error

  # Disallow this keywords outside of classes or class-like objects.
  # Generally a good idea but does not yet work with class properties etc.
  no-invalid-this:
   - off

  no-iterator: error
  no-lone-blocks: error

  # Good style
  no-magic-numbers:
    - error
    - ignoreArrayIndexes: true
      ignore: [ -1, 0, 1, 2, 10, 16, 100, 1000 ]

  no-mixed-operators:
    - error
    - groups:
      - ['&', '|', '^', '~', '<<', '>>', '>>>']
      - ['==', '!=', '===', '!==', '>', '>=', '<', '<=']
      - ['&&', '||']
      - ['in', 'instanceof']
      allowSamePrecedence: false

  # Useless formatting with high maintenance
  no-multi-spaces: error

  no-multi-str: error
  no-native-reassign: error
  no-new-func: error
  no-new-wrappers: error
  no-octal: error
  no-octal-escape: error

  valid-typeof: error

  template-tag-spacing:
    - error
    - never

  # Disable direct init: new require("app-header")
  no-new-require: error

  # Use path.join/resolve instead
  no-path-concat: error

  # disallow certain object properties
  # http://eslint.org/docs/rules/no-restricted-properties
  no-restricted-properties:
    - error
    - object: 'arguments'
      property: callee
      message: arguments.callee is deprecated
    - property: __defineGetter__
      message: 'Please use Object.defineProperty instead.'
    - property: __defineSetter__
      message: 'Please use Object.defineProperty instead.'
    - object: Math
      property: pow
      message: 'Use the exponentiation operator (**) instead.'

  # Prevent side effects to arguments objects, but also makes code sometimes more complexer
  # when you have some logic in place to deal with different argument sets.
  # Still with ES6 default arguments and destructing params it's easier solvable today than in the past.
  no-param-reassign: error

  # Access NodeJS environment. Used mostly for code variations e.g. `NODE_ENV`
  no-process-env:
    - off

  # Deprecated feature
  no-proto: error

  # Disabled. Therefor they are variables, right?
  no-redeclare:
    - off

  # Readability wins
  no-return-assign: error

  no-script-url:
    - error
  no-self-assign:
    - error
  no-self-compare: error

  # Omit magic syntax... Readability for all wins
  no-sequences: error

  # Good idea to keep some more error info:
  # "The fundamental benefit of Error objects is that they automatically keep track of where they were built and originated."
  no-throw-literal: error

  no-unmodified-loop-condition:
    - error
  no-unused-expressions:
    - error
    - allowTernary: true
      allowShortCircuit: true
  no-useless-call:
    - error
  no-useless-concat:
    - error
  no-useless-computed-key:
    - error
  no-useless-constructor:
    - error
  no-useless-escape:
    - error
  no-useless-rename:
    - error
    - ignoreDestructuring: false
      ignoreImport: false
      ignoreExport: false

  no-void:
    - error
  no-with: error

  # Mainly for securing code compatibility
  radix:
    - error
    - always

  # Does not improve maintainability in my opinion... instead makes
  # unused variables harder to track over time
  vars-on-top:
    - off

  # Prefer inside for readability
  wrap-iife:
    - error
    - inside

  # Actually interesting that this ugliness should be even something to consider
  yoda:
    - error
    - never

  # Enforce strict mode globally which also happens during bundling
  strict:
    - error
    - global

  # Only relevant in IE8 and earlier. Would not allow to use the same error variable in
  # the same scope. Still no good practice for understanding the code.
  no-catch-shadow: error

  # For better maintainability
  no-shadow: error

  # Cleaner code
  no-shadow-restricted-names: error

  no-sparse-arrays: error

  no-this-before-super: error

  # Stupid idea which needs to be prevented
  no-undef-init: error

  # I sometimes like using it to differentiate between null and undefined
  no-undefined:
    - off

  no-unexpected-multiline: error

  no-unreachable: error

  no-unused-vars:
    - error
    - varsIgnorePattern: '^_'
      args: none
  no-use-before-define:
    - error
    - functions: false
      classes: false
