#################################################################
# Stylistic
#################################################################

rules:
  # Reduce visual clutter though non required commas.
  # Code is more often read than written. Optimize for that.
  comma-dangle:
    - error
    - never

  # Require parens in arrow function arguments.
  # Otherwise might be visually confusing.
  arrow-parens:
    - error
    - always

  # Require braces in arrow function body as needed
  arrow-body-style:
    - error
    - as-needed

  # Require Following Curly Brace Conventions
  curly:
    - off

  # See also: https://en.wikipedia.org/wiki/Indent_style
  # brace-style:
  #  - error
  #  - 1tbs

  # Require Camelcase
  camelcase: error


  comma-style:
    - error
    - last

  consistent-this:
    - error
    - self
  dot-location:
    - error
    - property
  eol-last: error

  # Useful for debugging in older browsers, but a lot of work to manually add everywhere
  func-names:
    - off

  jsx-quotes:
    - error
    - prefer-double

  max-lines:
    - warn
    - skipBlankLines: true
      skipComments: true
      max: 250

  # Prefering declaration
  func-style:
    - error
    - declaration
    - allowArrowFunctions: true

  max-statements-per-line:
    - error
    - max: 2

  id-length:
    - error
    - min: 4
      max: 40
      # 'i' + 'l' = typical looping constructs
      # 't' = support convention in ava test runner
      # 'fs' = built-in fs module
      exceptions: ["i", "l", "t", "id", "fs", "url", "uri",
        "key", "obj", "pos", "row", "col", "map", "env",
        "min", "max",
        "CWD", "pkg"
        ]
      properties: never

  # Makes sense in NodeJS for native methods but is flawed because it is based purely on the
  # naming and marks errors for a lot of user written UI code.
  no-sync:
    - off

  lines-around-directive:
    - error

  lines-around-comment:
    - error
    - beforeBlockComment: true
      afterBlockComment: false
      beforeLineComment: true
      afterLineComment: false
      allowBlockStart: true
      allowBlockEnd: false
      allowObjectStart: true
      allowObjectEnd: false
      allowArrayStart: true
      allowArrayEnd: false

  max-depth:
    - error
    - maximum: 3

  max-len:
    - error
    - code: 140
      comments: 160
      ignoreUrls: true
      tabWidth: 2

  max-nested-callbacks:
    - error
    - 3

  max-params:
    - error
    - 3

  max-statements:
    - error
    - 25
    - ignoreTopLevelFunctions: true

  new-cap:
    - error
    - capIsNew: false

  new-parens: error

  # It good to have newlines when declaring a block of variables, but not for just one
  # where we directly have some actionable stuff afterwards.
  newline-after-var:
    - off

  # Increase readability, but does not work everywhere... therefor we keep it off
  # and let the individual developer decide.
  newline-before-return: off
  newline-per-chained-call: off

  no-array-constructor: error

  # Generally prevents errors + rule can be disabled locally when required
  no-bitwise: error

  # Don't see why this is regarded as problematic
  no-continue: off
  no-control-regex: error
  no-delete-var: error
  no-extra-parens:
    - off
  no-dupe-args: error
  no-dupe-keys: error
  no-duplicate-case: error
  no-empty-character-class: error
  no-ex-assign: error
  no-extra-bind: error
  no-extra-label: error
  no-func-assign: error
  no-invalid-regexp: error
  no-label-var: error
  no-labels:
    - error
    - allowLoop: false
      allowSwitch: false

  # Leads to complexer to overlook code
  no-inline-comments: error

  # Might be used to improve code for human logic
  no-lonely-if: off

  no-multiple-empty-lines:
    - error
    - max: 4
      maxEOF: 1
      maxBOF: 0

  # Can help, but also can make code more complex/unnaturally structured
  no-negated-condition: off
  no-nested-ternary: error
  no-new-object: error
  no-obj-calls: error

  # Seems to be a new trend to omit this e.g. in Swift and other modern languages
  # But is pretty convenient in classic for-loops... therefor we allow it there
  no-plusplus:
    - error
    - allowForLoopAfterthoughts: true

  object-property-newline:
    - error
    - allowMultiplePropertiesPerLine: true

  no-confusing-arrow: error

  no-duplicate-imports: error

  no-new-symbol: error

  object-shorthand:
    - error
    - always
    - ignoreConstructors: true
      avoidQuotes: true

  no-restricted-syntax:
    - error
    - WithStatement
    - DebuggerStatement
    - LabeledStatement

  no-ternary:
    - off

  no-underscore-dangle: off

  # Getting people to senior level...
  no-unneeded-ternary: error

  one-var:
    - error
    - initialized: never

  one-var-declaration-per-line:
    - error
    - initializations

  operator-assignment: error

  operator-linebreak:
    - error
    - after



  unicode-bom:
    - error
    - never

  use-isnan: error

  # Not needed with Alman style. Interestingly deals with the same issue in a different way.
  padded-blocks:
    - error
    - never

  # That's a neat little setting for keeping code readable
  quote-props:
    - error
    - consistent-as-needed

  # Variables and Imports should be sorted in semantic groups not by name
  sort-imports:
    - off
  sort-vars:
    - off

  # I like the improved readability when using parens
  wrap-regex: error

  no-negated-in-lhs: error
  no-template-curly-in-string: error
  no-undef: error
  no-unused-labels: error
  require-yield: error
